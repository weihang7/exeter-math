// Generated by CoffeeScript 1.6.3
(function() {
  var MAX_SCORE, doc_body, formatTeam, formatTime, highlighted, position, refreshTeams, refresh_search, remaining_time, searchTeamExact, searchTeamPrefix, search_found, syncTime, teams, zeroPad, cycleIndex;

  MAX_SCORE = 180;

  remaining_time = 0;

  cycleIndex = 0;

  search_found = false;

  teams = [];

  highlighted = $("");

  refresh_search = function(x) {
    return x;
  };

  doc_body = null;

  position = 0;

  refreshTeams = function(callback) {
    cycleIndex += 1;
    return $.ajax({
      url: "/guts_round_update",
      dataType: "json",
      success: function(data) {
        var a = [5,5,5,7,7,7,9,9,9,11,11,11,13,13,13,15,15,15,18,18,18,22,22,22];
        for (var i = 0; i < data.teams.length; ++i) {
          data.teams[i].score = 0;
          data.teams[i].progress = 0;
          if (data.teams[i].scores) {
            data.teams[i].scores = JSON.parse(data.teams[i].scores);
            console.log(data.teams[i].scores);
            for(var j = 0; j < data.teams[i].scores.length; ++j) {
              if(data.teams[i].scores[j]){
                data.teams[i].score += a[j];
              }
              data.teams[i].progress += a[j];
            }
          }
        }
        data.teams.sort(function(a, b) {
          return b.score - a.score;
        });
        return callback(data.teams, function() {
          return refreshTeams(callback);
        });
      }
    });
  };

  syncTime = function(callback) {
    return $.ajax({
      url: "/guts_time_sync",
      dataType: "json",
      success: function(data) {
        callback(data);
        return setTimeout((function() {
          return syncTime(callback);
        }), 10000);
      }
    });
  };

  zeroPad = function(n, digits) {
    var str, zeroes, _;
    str = n.toString();
    if (str.length < digits) {
      zeroes = ((function() {
        var _i, _ref, _results;
        _results = [];
        for (_ = _i = 1, _ref = digits - str.length; 1 <= _ref ? _i <= _ref : _i >= _ref; _ = 1 <= _ref ? ++_i : --_i) {
          _results.push("0");
        }
        return _results;
      })()).join("");
      return zeroes + str;
    } else {
      return str;
    }
  };

  $("#search_wrapper").hide();

  formatTime = function(time) {
    var hours, minutes;
    hours = Math.floor(time / 3600);
    time -= hours * 3600;
    minutes = Math.floor(time / 60);
    time -= minutes * 60;
    return zeroPad(hours, 2) + ":" + zeroPad(minutes, 2) + ":" + zeroPad(time, 2);
  };

  formatTeam = function(team, i) {
    return $("<div>").addClass("team_wrapper").append($("<div>").addClass("team").append($("<div>").addClass("team_name").text(team.name)).append($("<div>").addClass("team_score").text(team.score + "/" + team.progress + " #" + i)).append($("<div>").addClass("team_bar").append($("<div>").addClass("team_scorebar").width((team.score / MAX_SCORE * 100) + "%")).append($("<div>").addClass("team_progressbar").width(((team.progress - team.score) / MAX_SCORE * 100) + "%")).append($("<div>").addClass("team_fullbar").width((1- (team.progress / MAX_SCORE)) * 100 + '%'))));
  };

  searchTeamPrefix = function(search_prefix) {
    var search_length, team, _i, _len;
    search_prefix = search_prefix.toLowerCase();
    search_length = search_prefix.length;
    for (_i = 0, _len = teams.length; _i < _len; _i++) {
      team = teams[_i];
      if (team.name.slice(0, +(search_length - 1) + 1 || 9e9).toLowerCase() === search_prefix) {
        search_found = true;
        highlighted = team.el;
        doc_body.scrollTop(team.el.addClass("highlighted").offset().top);
        return function() {
          return searchTeamPrefix(search_prefix);
        };
      }
    }
    return function(x) {
      return x;
    };
  };

  searchTeamExact = function(search) {
    var team, _i, _len;
    search = search.toLowerCase();
    for (_i = 0, _len = teams.length; _i < _len; _i++) {
      team = teams[_i];
      if (team.name.toLowerCase() === search) {
        search_found = true;
        highlighted = team.el;
        doc_body.scrollTop(team.el.addClass("highlighted").offset().top);
        return function() {
          return searchTeamExact(search);
        };
      }
    }
    return function(x) {
      return x;
    };
  };

  window.onload = function() {
    var animation_interval, animation_limit, body, tick, time_interval, timer;
    syncTime(function(data) {
      return remaining_time = data.time;
    });
    timer = $("div#timer");
    time_interval = setInterval((function() {
      if (remaining_time < 0) {
          remaining_time = 0; clearInterval(time_interval); timer.css('color', 'red');
      }
      timer.text(formatTime(remaining_time));
      return remaining_time -= 1;
    }), 1000);
    body = $("div#body");
    doc_body = $(document.body);
    animation_limit = 0;
    animation_interval = 0;
    tick = function(cont, time, endFlag) {
      doc_body.scrollTop(position);
      setTimeout(function() {
          if (!search_found) {
            //position += animation_interval;
            var max = 0;
            position = $(".team_wrapper").each(function(el) {
                if ($(this).offset().top < $(window).height() + position) max = Math.max($(this).offset().top, max);
            });
            position = max;
          }
          if (endFlag === true) {
            position = 0;
            cont();
          }
          else if (position > animation_limit || (new Date()).getTime() - time > 30000) {
            tick(cont, time, true);
          } else {
            setTimeout(tick(cont, time, false), 5000);
         }
      }, 5000);
    };
    $(window).scroll(function() {
      if (Math.abs(doc_body.scrollTop() - position) > 2) {
        return position = doc_body.scrollTop();
      }
    });
    refreshTeams(function(data, cont) {
      var element, team, _i, _len, sortedData;
      teams.length = 0;
      body.html("");
      if (cycleIndex % 2 === 1) {
          data.sort(function(a, b) {
              return (a.name > b.name ? 1 : -1);
          });
          sortedData = data.slice(0).sort(function(a, b) {
              return (a.score < b.score ? 1 : -1);
          });
      }
      else {
          sortedData = data;
          data.sort(function(a, b) {
              return (a.score < b.score ? 1 : -1);
          });
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        team = data[_i];
        element = formatTeam(team, sortedData.indexOf(team) + 1);
        body.append(element);
        teams.push($.extend({
          el: element
        }, team));
      }
      refresh_search();
      animation_limit = body.height() - $(window).height();
      //animation_interval = $(window).height(); //animation_limit / 10;
      return tick(cont, (new Date()).getTime());
    });
    return $("#search").keyup(function(e) {
      highlighted.removeClass("highlighted");
      highlighted = $("");
      if (this.value.length === 0) {
        search_found = false;
        refresh_search = function(x) {
          return x;
        };
        return;
      }
      if (e.keyCode === 13) {
        return refresh_search = searchTeamExact(this.value);
      } else {
        return refresh_search = searchTeamPrefix(this.value);
      }
    });
  };

}).call(this);
